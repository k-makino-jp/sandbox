// Code generated by MockGen. DO NOT EDIT.
// Source: json/json.go

// Package json is a generated GoMock package.
package json

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockJsonInterface is a mock of JsonInterface interface.
type MockJsonInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJsonInterfaceMockRecorder
}

// MockJsonInterfaceMockRecorder is the mock recorder for MockJsonInterface.
type MockJsonInterfaceMockRecorder struct {
	mock *MockJsonInterface
}

// NewMockJsonInterface creates a new mock instance.
func NewMockJsonInterface(ctrl *gomock.Controller) *MockJsonInterface {
	mock := &MockJsonInterface{ctrl: ctrl}
	mock.recorder = &MockJsonInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJsonInterface) EXPECT() *MockJsonInterfaceMockRecorder {
	return m.recorder
}

// MarshalIndent mocks base method.
func (m *MockJsonInterface) MarshalIndent(v interface{}, prefix, indent string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalIndent", v, prefix, indent)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalIndent indicates an expected call of MarshalIndent.
func (mr *MockJsonInterfaceMockRecorder) MarshalIndent(v, prefix, indent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalIndent", reflect.TypeOf((*MockJsonInterface)(nil).MarshalIndent), v, prefix, indent)
}

// Unmarshal mocks base method.
func (m *MockJsonInterface) Unmarshal(data []byte, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockJsonInterfaceMockRecorder) Unmarshal(data, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockJsonInterface)(nil).Unmarshal), data, v)
}
