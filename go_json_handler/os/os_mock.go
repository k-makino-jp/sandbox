// Code generated by MockGen. DO NOT EDIT.
// Source: os/os.go

// Package os is a generated GoMock package.
package os

import (
	fs "io/fs"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOsInterface is a mock of OsInterface interface.
type MockOsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOsInterfaceMockRecorder
}

// MockOsInterfaceMockRecorder is the mock recorder for MockOsInterface.
type MockOsInterfaceMockRecorder struct {
	mock *MockOsInterface
}

// NewMockOsInterface creates a new mock instance.
func NewMockOsInterface(ctrl *gomock.Controller) *MockOsInterface {
	mock := &MockOsInterface{ctrl: ctrl}
	mock.recorder = &MockOsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOsInterface) EXPECT() *MockOsInterfaceMockRecorder {
	return m.recorder
}

// WriteFile mocks base method.
func (m *MockOsInterface) WriteFile(name string, data []byte, perm fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", name, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockOsInterfaceMockRecorder) WriteFile(name, data, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockOsInterface)(nil).WriteFile), name, data, perm)
}
